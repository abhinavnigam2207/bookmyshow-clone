{"version":3,"sources":["components/selectCustomer/index.js","constants.js","App.js","serviceWorker.js","index.js"],"names":["btn","css","customers","setCustomers","onClick","disabled","seats","A","B","C","D","E","F","G","H","container","fs25","textLeft","theatre","seatCSS","active","flex","App","useState","currentSeats","setCurrentSeats","selectedSeats","setSelectedSeats","setSeats","category","row","k","i","resp","forEach","seat","alreadySelected","length","currSeats","selSeats","push","setSingleSeat","Object","keys","map","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2ed1dacc.chunk.js","sourcesContent":["/** @jsx jsx */\r\nimport { css, jsx } from '@emotion/core';\r\nimport React, { Fragment, useState, useEffect } from 'react';\r\n\r\nconst btn = css`\r\n  color: #0378FF;\r\n  border-radius: 50%;\r\n  border: 1px solid #0378FF;\r\n  background: white;\r\n  width: 25px;\r\n  height: 25px;\r\n  font-size: larger;\r\n  margin: 0 7px;\r\n  cursor: pointer;\r\n  :focus{ outline: none; }\r\n  :disabled{\r\n    cursor: default;\r\n    color: #CCC;\r\n    border: 1px solid #CCC;\r\n  }\r\n`;\r\n\r\nexport default ({customers, setCustomers}) => (\r\n  <Fragment>\r\n    <div>\r\n      <label>Select number of people</label><br/>\r\n      <div>\r\n        <button onClick={()=>{setCustomers(customers-1)}} disabled={customers===0} css={btn}>-</button>\r\n        {customers}\r\n        <button onClick={()=>{setCustomers(customers+1)}} disabled={customers===10} css={btn}>+</button>\r\n      </div>\r\n    </div>\r\n    <hr/>\r\n  </Fragment>\r\n)","export const seats = {\r\n  'CLUB - Rs300.0': {\r\n    A: [ 0,1,0,0,0,0,0,0,0,0],\r\n    B: [ 0,0,0,0,0,1,1,0,0,0]\r\n  },\r\n  'EXECUTIVE - Rs200.0': {\r\n    C: [ 0,0,1,0,1,1,1,0,0,0],\r\n    D: [ 0,0,1,0,1,1,1,0,0,0],\r\n    E: [ 0,0,0,0,0,0,0,0,0,0],\r\n    F: [ 0,0,1,0,1,1,1,0,0,0],\r\n    G: [ 1,0,1,0,0,0,0,1,1,1],\r\n    H: [ 1,1,1,0,0,1,0,0,1,1]\r\n  }\r\n};","/** @jsx jsx */\nimport { css, jsx } from '@emotion/core';\nimport React, { useState } from 'react';\nimport SelectCustomer from './components/selectCustomer';\nimport { seats } from './constants';\n\nconst container = css`\n  text-align: center;\n  padding: 1% 5%;\n  margin: 0 auto;\n`;\nconst fs25 = css`font-size: 25px;`;\nconst textLeft  =css`text-align:left;`;\nconst theatre = css`\n  width: 60%;\n  margin: 10px auto;\n  background: #f7f5f5;\n  padding: 1.5%;\n  border-radius: 10px;\n  color:#757474;\n  @media (max-width: 767px) { width: 80%;}\n`;\nconst seatCSS = css`\n  height: 30px;\n  width: 25px;\n  border-radius: 3px;\n  background: white;\n  cursor: pointer;\n  margin: 5px;\n  padding: 2px;\n  color: #a4a4a4;\n  border: 1px solid #a4a4a4;\n  :focus{ outline: none; }\n  :disabled{\n    cursor: default;\n    color: white;\n    background: #CCC;\n    border: 1px solid #CCC;\n  }\n`;\nconst active = css`background: #72f582; border: 1px solid #72f582;`;\nconst flex=css`\n  display:flex;\n  justify-content: space-between;\n  align-items: center;\n  padding-right: 10%;\n`;\n\nfunction App() {\n  const [customers, setCustomers] = useState(0);\n  const [currentSeats, setCurrentSeats] = useState({...seats});\n  const [selectedSeats, setSelectedSeats] = useState([]);\n\n  const alreadySelected = (category, row, i) => {\n    let resp = false;\n    selectedSeats.forEach((seat)=>{\n      if (seat[0]===category && seat[1]===row && seat[2]===i ) { resp = true }\n    });\n    return resp;\n  };\n\n  const setSingleSeat = (category, row, k) => {\n    const currSeats = {...currentSeats};\n    const selSeats = selectedSeats;\n    currSeats[selectedSeats[0][0]][selectedSeats[0][1]][selectedSeats[0][2]] = 0;\n    currSeats[category][row][k] = 2;\n    selSeats[0] = [category, row, k];\n    setCurrentSeats(currSeats);\n    setSelectedSeats(selSeats);\n  };\n\n  const setSeats = (category, row, k) => {\n    if(customers===0 || alreadySelected(category, row, k)) { return; }\n    if(selectedSeats.length===customers){\n      setSingleSeat(category, row, k);\n      return;\n    }\n    const currSeats = {...currentSeats};\n    const selSeats = selectedSeats;\n    for(let i=k; i<currSeats[category][row].length; i++){\n      if(currSeats[category][row][i] === 1){ \n        debugger\n        break;\n      }\n      if((i<customers+k) && (currSeats[category][row][i] !== 2)) {\n        currSeats[category][row][i] = 2;\n        selSeats.push([category, row, i]);\n      }\n    }\n    setSelectedSeats(selSeats);\n    setCurrentSeats(currSeats);\n  };\n  \n  return (\n    <div css={container}>\n      <header><h1 css={fs25}>Booking App</h1></header>\n      <SelectCustomer customers={customers} setCustomers={setCustomers} />\n      <div css={theatre}>\n        {Object.keys(currentSeats).map((category)=>(\n          <div>\n            <div css={textLeft}>{category}</div>\n            {Object.keys(currentSeats[category]).map((row)=>(\n              <div css={flex}>\n                <div>{row}</div>\n                <div>\n                  {currentSeats[category][row].map((seat, i)=>(\n                    <button onClick={()=>{setSeats(category, row, i)}} disabled={seat===1} css={[seatCSS, seat===2 ? active: '']}>{i+1}</button>       \n                  ))}\n                </div>\n              </div>\n            ))}\n            <hr/>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}